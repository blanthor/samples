Level-set: beginner Mobile Services talk

DATA
1. Portal quickstart
* Create mobile service, dismiss 
* Show quickstart, all languages
* Run HTML quickstart
* Data tab gets populated
* Could be used from PhoneGap


2. Server validation for "work"

	> start/index.html

	> table/todoitem.insert.js
	function insert(item, user, request) {
	    if (item.text.toLowerCase().indexOf('work') > -1) {
	        request.respond(statusCodes.BAD_REQUEST, {
	            error: "You're not allowed to talk about this in Las Vegas"
	        });
	    } else {
	        request.execute();
	    }
	}

3. Client-side filtering

	> filteringPaging/index.html

	> filteringPaging/page.js
	var filter = $('#query-filter')
	var query = todoItemTable.where(function(val){
		return this.complete == false &&
	    this.text.indexOf(val) == 0;
	}, filter.val());

4. Paging

	> filteringPaging/page.js
    var filter = $('#query-filter')
    var query = todoItemTable.where(function(val){
        return this.complete == false &&
        this.text.indexOf(val) == 0;
    }, filter.val())
    .skip(skip*take).take(take).includeTotalCount();

5. Custom API - just show in the portal

AUTH

1. Show documentation
2. Create Facebook app
3. Copy credentials into portal
4. Turn on permissions - show error
5. How do we do authenticate

	> auth/index.html

	> auth/page.js
    function logIn() {
        client.login('facebook').then(refreshAuthDisplay, handleError);
    }


    function logOut() {
        client.logout();
        refreshAuthDisplay();
    }


6. How do we authorize per user

	> table/todoitem.insert.js
	function insert(item, user, request) {
	    if (item.text.toLowerCase().indexOf('work') > -1) {
	        request.respond(statusCodes.BAD_REQUEST, {
	            error: "You're not allowed to talk about this in Las Vegas"
	        });
	    } else {
	    	item.userId = user.userId;
	        request.execute();
	    }
	}

	> table/todoitem.read.js
	function read(query, user, request) {
	   query.where({ userId: user.userId });    
	   request.execute();
	}


PUSH

1. Get pusher from the store
2. Set up source control
3. Clone repo
4. Add server scripts for Pusher

	> shared/pusher.js
	function generateClient(){
		var Pusher = require('pusher');
		return new Pusher(
		{
			appId: '{get from portal}',
			key: '{get from portal}',
			secret: '{get from portal}'
		});
	}

	exports.triggerRefresh = function() {
		var pusher = generateClient();
		pusher.trigger('todo', 'refresh', {});
		
	};

	exports.triggerSendMessage = function(message){
		var pusher = generateClient();
		pusher.trigger('todo', 'sendMessage', message);
	}

	> table/todoitem.insert.js, table/todoitem.update.js, table/todoitem.delete.js
    var pusher = require('../shared/pusher.js');
	pusher.triggerRefresh();

	> push/page.js
    // Pusher support
    var pusher = new Pusher(killertodoPusherId),
        channel = pusher.subscribe('todo');

    channel.bind('refresh', refreshTodoItems);

5. Scheduler
* Create scheduled job
* Show logs tab if you haven't
* Keep pusher console open

	> push/page.js
    channel.bind('sendMessage', function(payload){
        alert('Important message! ' + payload);
    });

    > scheduler/sendNews.js
	function sendNews() {
	    var pusher = require('../shared/pusher.js');
		pusher.triggerSendMessage('Head to the slots');
	}