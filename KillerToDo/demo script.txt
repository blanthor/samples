Level-set: beginner Mobile Services talk

DATA
1. Portal quickstart
* Create mobile service, dismiss 
* Show quickstart, all languages
* Run HTML quickstart
* Data tab gets populated
* Could be used from PhoneGap


2. Server validation for "work"

	> todoitem.insert.js
	function insert(item, user, request) {
	    if (item.text.toLowerCase().indexOf('work') > -1) {
	        request.respond(statusCodes.BAD_REQUEST, {
	            error: "You're not allowed to talk about this in Las Vegas"
	        });
	    } else {
	        request.execute();
	    }
	}

3. Client-side filtering

	<form id='query'>
	    <input type='text' id='query-filter' placeholder='Starts with' />
	</form>

	var filter = $('#query-filter')
	var query = todoItemTable.where(function(val){
		return this.complete == false &&
	    this.text.indexOf(val) == 0;
	}, filter.val());

	// Handle filtering
	 $('#query').submit(function(evt) {
	    var textbox = $('#query-filter'),
	        itemText = textbox.val();
	    if (itemText !== '') {
	        refreshTodoItems();
	    }
	    textbox.val('').focus();
	    evt.preventDefault();
	});


4. Paging

	<div class='section'>
	    <button id='prev'>Prev</button>
	    <button id='next'>Next</button>
	</div>

	var query = query.skip(skip*take).take(take).includeTotalCount();

	$('#summary').html('Showing page <strong>' + (skip + 1) + '</strong> out of ' +
	'<strong>' + Math.ceil(todoItems.totalCount / take) + '</strong>');

	// Handle paging
	var skip = 0,
	take = 3;

	$('#next').click(function(){
	    skip++;
	    refreshTodoItems();
	});

	$('#prev').click(function(){
	    if(skip !== 0){
	        skip--;
	        refreshTodoItems();
	    }
	});

5. Custom API

Write me

6. Scheduler

Write  me

AUTH

1. Show documentation
2. Create Facebook app
3. Copy credentials into portal
4. Turn on permissions - show error
5. How do we do authenticate

	<div id='logged-in' class='auth'>
	    You are logged in as <span id='login-name'></span>.
	    <img id='login-picture' />
	    <button id='log-out'>Log out</button>
	</div>
	<div id='logged-out' class='auth'>
	    You are not logged in.
	    <button>Log in</button>
	</div>

	// Handle auth
	function refreshAuthDisplay() {
	    var isLoggedIn = client.currentUser !== null;
	    $('#logged-in').toggle(isLoggedIn);
	    $('#logged-out').toggle(!isLoggedIn);


	    if (isLoggedIn) {
	        var facebookId = client.currentUser.userId.split(':')[1],
	            facebookGraphUri = 'http://graph.facebook.com/' + facebookId + '/';
	        $('#login-picture').attr('src', facebookGraphUri + 'picture?type=square');
	        $.get(facebookGraphUri + '?fields=name', function(result){
	            $('#login-name').text(result.name);
	        })
	        refreshTodoItems();
	    }
	}

	function logIn() {
	    client.login('facebook').then(refreshAuthDisplay, function(error){
	        alert('Error during login: ' + error);
	    });
	}

	function logOut() {
	    client.logout();
	    refreshAuthDisplay();
	    $('#todo-items').empty();
	    $('#summary').html('<strong>You must login to access data.</strong>');
	}

	refreshAuthDisplay();
	$('#summary').html('<strong>You must login to access data.</strong>');          
	$("#logged-out button").click(logIn);
	$("#logged-in button").click(logOut);

6. How do we authorize per user

	> todoitem.insert.js
	function insert(item, user, request) {
	    if (item.text.toLowerCase().indexOf('work') > -1) {
	        request.respond(statusCodes.BAD_REQUEST, {
	            error: "You're not allowed to talk about this in Las Vegas"
	        });
	    } else {
	    	item.userId = user.userId;
	        request.execute();
	    }
	}

	> todoitem.read.js
	function read(query, user, request) {
	   query.where({ userId: user.userId });    
	   request.execute();
	}


PUSH

1. Get pusher from the store
2. Set up source control
3. Clone repo
4. Add server scripts for Pusher

	> pusher.js
	exports.triggerRefresh = function() {
		var Pusher = require('pusher'),
		pusher = new Pusher(
		{
			appId: '{get from portal}',
			key: '{get from portal}',
			secret: '{get from portal}'
		});
		pusher.trigger('todo', 'refresh', {});
		
	};

	> todoitem.insert.js, todoitem.update.js, todoitem.delete.js
    var pusher = require('../shared/pusher.js');
	pusher.triggerRefresh();

	> app.js
    // Pusher support
    var pusher = new Pusher(killertodoPusherId),
        channel = pusher.subscribe('todo');

    channel.bind('refresh', refreshTodoItems);