Level-set: beginner Mobile Services talk

DATA
1. Portal quickstart
* Create mobile service, dismiss 
* Show quickstart, all languages
* Run HTML quickstart
* Data tab gets populated
* Could be used from PhoneGap


2. Server validation for "work"

	> start/index.html

	> table/todoitem.insert.js
	function insert(item, user, request) {
	    if (item.text.toLowerCase().indexOf('work') > -1) {
	        request.respond(statusCodes.BAD_REQUEST, {
	            error: "You're not allowed to talk about this in Las Vegas"
	        });
	    } else {
	        request.execute();
	    }
	}

3. Client-side filtering

	> filteringPaging/index.html

	> filteringPaging/page.js
	var filter = $('#query-filter')
	var query = todoItemTable.where(function(val){
		return this.complete == false &&
	    this.text.indexOf(val) == 0;
	}, filter.val());

4. Paging

	> filteringPaging/page.js
    var filter = $('#query-filter')
    var query = todoItemTable.where(function(val){
        return this.complete == false &&
        this.text.indexOf(val) == 0;
    }, filter.val())
    .skip(skip*take).take(take).includeTotalCount();

5. Custom API
* Add this, show using mssql pacjage to do something like a drop

AUTH

1. Turn on auth in the mobile service - previous demo fails
2. Show documentation
3. Create Facebook app
4. Copy credentials into portal
5. How do we do authenticate

	> auth/index.html

	> auth/page.js
    function logIn() {
        client.login('facebook').then(refreshAuthDisplay, handleError);
    }


    function logOut() {
        client.logout();
        refreshAuthDisplay();
    }


6. How do we authorize per user

	> table/todoitem.insert.js
	function insert(item, user, request) {
	    if (item.text.toLowerCase().indexOf('work') > -1) {
	        request.respond(statusCodes.BAD_REQUEST, {
	            error: "You're not allowed to talk about this in Las Vegas"
	        });
	    } else {
	    	item.userId = user.userId;
	        request.execute();
	    }
	}

	> table/todoitem.read.js
	function read(query, user, request) {
	   query.where({ userId: user.userId });    
	   request.execute();
	}

7. Show table in portal

PUSH

1. Set up source control
2. Walk through the directory structure
3. Clone repo
2. Get pusher from the store
4. Add server scripts for Pusher
5. Undo auth changes - scripts and portal

	> shared/pusher.js
	function generateClient(){
		var Pusher = require('pusher');
		return new Pusher(
		{
			appId: '{get from portal}',
			key: '{get from portal}',
			secret: '{get from portal}'
		});
	}

	exports.triggerRefresh = function() {
		var pusher = generateClient();
		pusher.trigger('todo', 'refresh', {});
		
	};

	exports.triggerSendMessage = function(message){
		var pusher = generateClient();
		pusher.trigger('todo', 'sendMessage', message);
	}

	> table/todoitem.insert.js, table/todoitem.update.js, table/todoitem.delete.js
    var pusher = require('../shared/pusher.js');
	pusher.triggerRefresh();

	> push/page.js
    // Pusher support
    var pusher = new Pusher(killertodoPusherId),
        channel = pusher.subscribe('todo');

    channel.bind('refresh', refreshTodoItems);

5. Scheduler
* Create scheduled job
* Show logs tab if you haven't
* Keep pusher console open

	> push/page.js
    channel.bind('sendMessage', function(payload){
        alert('Important message! ' + payload);
    });

    > scheduler/sendNews.js
	function sendNews() {
	    var pusher = require('../shared/pusher.js');
		pusher.triggerSendMessage('Head to the slots');
	}


DEMO SETUP
1. Reset git repo
2. Empty downloads folder
3. Create mobile service 
4. Update secrets.cs with mobile service creds
5. Ditto for Pusher creds
6. Go to Facebook, set redirect URL
7. Log out of Facebook